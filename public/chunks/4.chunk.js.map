{"version":3,"file":"./chunks/4.chunk.js","sources":["webpack:///./src/components/taskings/Tasking.jsx"],"sourcesContent":["import { Button, Card, Col, Row, Tabs } from 'antd';\nimport React, { Component } from 'react';\n// import Loadable from 'react-loadable';\nimport pdfBuilder, { mdc } from '../../pdf/pdfBuilder';\nimport PageForm from './components/PageForm';\nimport PageList from './components/PageList';\nimport Flightplan from './tabs/Flightplan';\nimport Navigation from './tabs/Navigation';\n\n// Antd Destructuring\nconst { TabPane } = Tabs;\n\n// LazyLoading\n// const LoadingComponent = <div>Loading...</div>;\n// const pdfBuilder = Loadable({\n//   loader: () => import('../../pdf/pdfBuilder'),\n//   loading: () => LoadingComponent,\n// });\n\n// const mdc = Loadable({\n//   loader: () => import('../../pdf/pdfBuilder').mdc,\n//   loading: () => LoadingComponent,\n// });\n\n/** MDC BUILDER */\nexport default class Tasking extends Component {\n  state = {\n    missionData: null,\n    pages: [],\n    panes: [],\n  };\n\n  componentDidMount() {\n    // Load the default mission values as a starting point\n    const { defaultData } = mdc;\n\n    // Update state\n    this.setState({ missionData: defaultData });\n  }\n\n  generatePDF = () => {\n    const { missionData, pages } = this.state;\n\n    /** Generate pages */\n    const content = [];\n    pages.forEach((page) => {\n      if (page.createPage) {\n        content.push(page.createPage(missionData));\n      }\n      return null;\n    });\n\n    /**  Generate and then open the pdf */\n    const pdf = pdfBuilder.makePdf(`132ND-MDC-${missionData.missionNumber}`, content);\n    pdf.open();\n  };\n\n  onTabChange = (activeKey) => {\n    this.setState({ activeKey });\n  };\n\n  onTabEdit = (targetKey, action) => {\n    switch (action) {\n      case 'add':\n        this.addTab();\n        break;\n      case 'remove':\n        this.removeTab(targetKey);\n        break;\n      default:\n        break;\n    }\n  };\n\n  updatePages = (pages) => {\n    const { panes } = this.state;\n\n    // Create new panes for all PDF pages (i.e. they have a createPage function)\n    const formPanes = pages.map((page) => {\n      const props = mdc.pages[page.pageKey];\n      if (page.createPage) {\n        return {\n          title: page.label,\n          key: `mdc-tab-${page.key}`,\n          create: page.createPage,\n          form: props.form,\n          content: null,\n        };\n      }\n    });\n\n    // Keep all default panes (i.e. they have isDefault:true set)\n    const defaultPanes = panes.filter((pane) => pane.isDefault === true);\n\n    // Update state with the new pages, activeKey and panes\n    this.setState(() => ({\n      pages,\n      panes: [...defaultPanes, ...formPanes],\n    }));\n  };\n\n  updateData = (dataObject) => {\n    this.setState((prevState) => ({\n      missionData: Object.assign({}, prevState.missionData, dataObject),\n    }));\n  };\n\n  render() {\n    const { missionData, panes, list } = this.state;\n    if (!missionData) return <div>Loading...</div>;\n\n    // Generate the content array from available MDC pages\n    const templates = Object.keys(mdc.pages).map((page) => {\n      const pageObj = mdc.pages[page];\n      return {\n        title: pageObj.title,\n        key: page,\n        createPage: pageObj.create,\n      };\n    });\n\n    // Add default content (PageForm) for all auto-generated panes\n    panes.forEach((pane) => {\n      /* eslint no-param-reassign:0 */\n      if (pane.form) {\n        pane.content = (\n          <PageForm form={pane.form} onUpdate={this.updateData} missionData={missionData} />\n        );\n      }\n    });\n\n    // Autogenerate MDC Panes\n    const mdcPanes = panes.map((pane) => (\n      <TabPane tab={pane.title} key={pane.key} closable={false}>\n        {pane.content}\n      </TabPane>\n    ));\n\n    const tabActions = (\n      <React.Fragment>\n        <Button type='primary' onClick={this.generatePDF} style={{ marginLeft: '0.5em' }}>\n          Print MDC\n        </Button>\n      </React.Fragment>\n    );\n\n    return (\n      <Card title='MDC Builder'>\n        <Row>\n          <Col className='gutter-row' span={24} md={24}>\n            <Tabs\n              hideAdd\n              type='editable-card'\n              onChange={this.onTabChange}\n              onEdit={this.onTabEdit}\n              tabBarExtraContent={tabActions}>\n              <TabPane tab='Flightplan' key='tasking-flightplan' closable={false}>\n                <Flightplan onUpdate={this.updateData} missionData={missionData} />\n              </TabPane>\n              <TabPane tab='Navigation' key='tasking-nav' closable={false}>\n                <Navigation onUpdate={this.updateData} missionData={missionData} />\n              </TabPane>\n              <TabPane tab='Signals' key='tasking-signals' closable={false}>\n                <p>Flightplan</p>\n              </TabPane>\n              <TabPane tab='Pages' key='tasking-mdc-setup' closable={false}>\n                <p>Some instructions here, followed by the add/remove/rearrange pages</p>\n                <PageList list={list} content={templates} onUpdate={this.updatePages} />\n              </TabPane>\n              {mdcPanes}\n            </Tabs>\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n}\n"],"mappings":"AACA","sourceRoot":""}