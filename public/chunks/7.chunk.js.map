{"version":3,"file":"./chunks/7.chunk.js","sources":["webpack:///./src/components/auth/Login.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n/* UI Components */\nimport { Row, Col, Card, Button, Form, Input, Icon, Checkbox, Alert } from 'antd';\n\n/* Redux Actions */\nimport { loginUser } from '../../actions/authActions';\n\n/**\n * Login (Main) Component\n */\nclass Login extends Component {\n  state = {\n    email: '',\n    password: '',\n    errors: {},\n  };\n\n  componentDidMount() {\n    const { auth, history } = this.props;\n    if (auth.isAuthenticated) {\n      // Send the user somewhere else if he is allready logged in (Dashboard maybe?)\n      history.push('/');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { auth, history, errors } = this.props;\n    if (auth.isAuthenticated) {\n      // Send the user somewhere else after successful login\n      history.push('/');\n    }\n\n    if (errors !== prevProps.errors) {\n      this.setState({ errors });\n    }\n    return null;\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { email, password } = this.state;\n    const { loginFunc } = this.props;\n\n    const userData = { email, password };\n    loginFunc(userData);\n  };\n\n  render() {\n    const { errors, email, password } = this.state;\n\n    return (\n      <WrappedLoginForm\n        onChange={this.onChange}\n        handleSubmit={this.handleSubmit}\n        errors={errors}\n        email={email}\n        password={password}\n      />\n    );\n  }\n}\n\nLogin.propTypes = {\n  loginFunc: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  errors: state.errors,\n});\n\nexport default connect(\n  mapStateToProps,\n  { loginFunc: loginUser },\n)(Login);\n\n/**\n * LoginForm Component\n */\nconst LoginForm = (props) => {\n  const { email, password, errors, form, onChange, handleSubmit } = props;\n  const { getFieldDecorator } = form;\n\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 5 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 5,\n      },\n    },\n  };\n\n  const alerts = [];\n  Object.keys(errors).forEach((err) => {\n    alerts.push(\n      <Alert\n        key={err}\n        description={errors[err]}\n        type='error'\n        showIcon\n        style={{ margin: '1em 0' }}\n      />,\n    );\n  });\n\n  return (\n    <Card title='Login'>\n      <Row>\n        <Col className='gutter-row' span={24} md={12}>\n          <Form onSubmit={handleSubmit}>\n            <Form.Item {...formItemLayout} label='Account Name'>\n              {getFieldDecorator('email', {\n                setFieldsValue: email,\n                rules: [{ required: true, message: 'Please input your email!' }],\n              })(\n                <Input\n                  prefix={<Icon type='user' style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  type='text'\n                  placeholder='Account Name'\n                  name='email'\n                  onChange={onChange}\n                  autoComplete='username'\n                />,\n              )}\n            </Form.Item>\n            <Form.Item {...formItemLayout} label='Password'>\n              {getFieldDecorator('password', {\n                setFieldsValue: password,\n                rules: [{ required: true, message: 'Please input your Password!' }],\n              })(\n                <Input\n                  prefix={<Icon type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  type='password'\n                  placeholder='Password'\n                  name='password'\n                  onChange={onChange}\n                  autoComplete='current-password'\n                />,\n              )}\n            </Form.Item>\n            <Form.Item {...tailFormItemLayout}>\n              {getFieldDecorator('remember', {\n                valuePropName: 'checked',\n                initialValue: true,\n              })(<Checkbox>Remember me</Checkbox>)}\n              <Link to='/login' style={{ float: 'right' }}>\n                Forgot password\n              </Link>\n              <Button\n                type='primary'\n                htmlType='submit'\n                className='login-form-button'\n                style={{ width: '100%' }}>\n                Log in\n              </Button>\n              <Link to='/register'>\n                <small>Don&apos;t have an account yet? Click here to register!</small>\n              </Link>\n            </Form.Item>\n            <Form.Item {...tailFormItemLayout}>{alerts}</Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n\n/**\n * WrappedLoginForm - For enabling AntD Form decorators on LoginForm\n */\nexport const WrappedLoginForm = Form.create({ name: 'loginForm' })(LoginForm);\n"],"mappings":"AAAA","sourceRoot":""}